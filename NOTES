collection indexing
  foo[3]

-------------------------------------------------------------------------------

"SELECT conf, rgrps from " + keyspace_table_name +
"WHERE node_id = ? and jid = '' and type = 1 and res = '' and sub_id='' and item_id='' and exist=True "

select("conf", "rgrps").from("foo").where(
  and(equal("node_id", binding{}),
      equal("jid", ""),
      equal("type", 1),
      equal("res", ""),
      equal("sub_id", ""),
      equal("item_id", ""),
      equal("exist", true)))

select foo, bar FROM
  casst::select("foo", "bar").from
select foo AS f, bar AS b FROM
  casst::select(casst::alias("foo", "f"), casst::alias("bar", "b")).from
  casst::select("foo", casst::as(), "f", "bar", casst::as(), "b").from
  casst::select("foo", casst::as("f"), "bar", casst::as("b")).from
select WRITETIME( foo ) AS f FROM
  casst::select(casst::alias(casst::writetime("foo"), "f")).from
select TTL( foo ) AS f FROM
  casst::select(casst::alias(casst::ttl("foo"), "f")).from
select dateOf( foo ) AS f, bar AS b FROM
  casst::select(casst::alias(casst::date_of("foo"), "f"), casst::alias("bar", "b")).from
select DISTINCT foo, bar FROM
  casst::select_distinct("foo", "bar").from
select DISTINCT foo AS f, bar AS b FROM
select DISTINCT WRITETIME( foo ) AS f FROM
select DISTINCT TTL( foo ) AS f FROM
select DISTINCT dateOf( foo ) AS f, bar AS b FROM
select COUNT( * ) FROM
  casst::select_count().from
select COUNT( 1 ) FROM
  casst::select_count().from
